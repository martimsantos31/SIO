#!/usr/bin/env python3
import os
import sys

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if src_path not in sys.path:
    sys.path.append(src_path)

from utils.utils import send_authed_message, decrypt_message

import json
import requests
import client


def main():
    """
    Implements the rep_activate_subject command to activate a subject in an organization.
    """
    try:
        state, args = client.parse_args()

        session_file = args["arg0"]
        username = args["arg1"]

        if not all([session_file, username]):
            raise ValueError("Both session_file and username are required.")

        # Load session file
        try:
            with open(session_file, "r") as f:
                session_data = json.load(f)
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid session file '{session_file}': {e}")

        organization = session_data.get("org")
        if not organization:
            raise ValueError("Session file does not contain an organization.")

        # Prepare request data
        payload = {
            "organization": organization,
            "username": username,
        }

        url = f"http://{state['REP_ADDRESS']}/subject/activate"
        response = send_authed_message(payload, session_data, url, "POST")

        shared_key = session_data.get("shared_key")
        response_data = decrypt_message(response.json(), shared_key)

        if response.status_code == 200:
            print("Subject activated successfully:", response_data["subject"])
        else:
            print("Error:", response_data.get("error", "Unknown error"))

    except ValueError as ve:
        client.logger.error(f"ValueError: {ve}")
        print(f"Error: {ve}")
        return 1
    except Exception as e:
        client.logger.error(f"Error in rep_activate_subject: {e}")
        print(f"Error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    main()
