#!/usr/bin/env python3
import os
import sys

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if src_path not in sys.path:
    sys.path.append(src_path)

from utils.utils import send_authed_message, decrypt_message

import json
import requests
import client
import os


def main():
    """
    Implements the rep_drop_role command to remove a role from the session.
    """
    try:
        state, args = client.parse_args()

        session_file = args["arg0"]
        role_name = args["arg1"]

        if not all([session_file, role_name]):
            raise ValueError("Session_file and role_name are required.")

        session_file_path = os.path.join(os.path.dirname(__file__), session_file)
        try:
            with open(session_file_path, "r") as f:
                session_data = json.load(f)
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid session file '{session_file}': {e}")

        organization = session_data.get("org")
        session_id = session_data.get("session_id")

        if not organization or not session_id:
            raise ValueError(
                "Session file must contain a valid organization and session ID."
            )

        payload = {"role": role_name}

        url = f"http://{state['REP_ADDRESS']}/session/remove-role"
        response = send_authed_message(payload, session_data, url, "POST")

        shared_key = session_data.get("shared_key")
        response_data = decrypt_message(response.json(), shared_key)

        if response.status_code == 200:
            print("Role removed successfully from session")
        else:
            print("Error:", response_data.get("error", "Unknown error"))

    except ValueError as ve:
        client.logger.error(f"ValueError: {ve}")
        print(f"Error: {ve}")
        return 1
    except Exception as e:
        client.logger.error(f"Error in rep_drop_role: {e}")
        print(f"Error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    main()
