#!/usr/bin/env python3
import os
import sys

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if src_path not in sys.path:
    sys.path.append(src_path)
#!/usr/bin/env python3

import json
import requests
import client
import os
from utils.utils import send_authed_message, decrypt_message


def main():
    """
    Implements the rep_list_roles command to list all roles in an organization.
    """
    try:
        state, args = client.parse_args()

        session_file = args["arg0"]

        if not session_file:
            raise ValueError("Session file is required.")

        session_file_path = os.path.join(os.path.dirname(__file__), session_file)
        try:
            with open(session_file_path, "r") as f:
                session_data = json.load(f)
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid session file '{session_file}': {e}")

        shared_key = session_data.get("shared_key")

        organization = session_data.get("org")

        url = f"http://{state['REP_ADDRESS']}/org/{organization}/roles"
        response = send_authed_message({"message": "test"}, session_data, url, "GET")

        roles = decrypt_message(response.json(), shared_key)

        if roles.get("error", None) != None:
            print("There was an error retriving the documents: ", roles.get("error"))
            return 0

        roles = roles.get("acl", [])

        print("Roles in the organization:")

        for role in roles:
            print(f"- {role}")

    except ValueError as ve:
        client.logger.error(f"ValueError: {ve}")
        print(f"Error: {ve}")
        return 1
    except Exception as e:
        client.logger.error(f"Error in rep_list_roles: {e}")
        print(f"Error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    main()
