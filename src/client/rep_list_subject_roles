#!/usr/bin/env python3
import os
import sys

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if src_path not in sys.path:
    sys.path.append(src_path)

import json
import client
import os
from utils.utils import send_authed_message, decrypt_message


def main():
    """
    Implements the rep_list_subject_roles command to retrieve roles of a given subject.
    """
    try:
        state, args = client.parse_args()

        session_file = args["arg0"]
        username = args["arg1"]

        if not all([session_file, username]):
            raise ValueError("Session_file and username are required.")

        session_file_path = os.path.join(os.path.dirname(__file__), session_file)
        try:
            with open(session_file_path, "r") as f:
                session_data = json.load(f)
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid session file '{session_file}': {e}")

        organization = session_data.get("org")
        session_id = session_data.get("session_id")
        shared_key = session_data.get("shared_key")
        salt = session_data.get("salt")

        if not organization or not session_id:
            raise ValueError(
                "Session file must contain a valid organization and session ID."
            )

        payload = {"organization": organization, "username": username}

        url = f"http://{state['REP_ADDRESS']}/subject/roles"
        response = send_authed_message(payload, session_data, url, "GET")

        roles = decrypt_message(response.json(), shared_key)
        
        print(roles)
        
        if roles.get("error", None) != None:
            print("There was an error retriving the roles: ", roles.get("error"))
            return 0

        roles = roles.get("roles", [])
        print(f"Roles subject'{username}':")
        if not roles:
            print("No roles found.")
        for role in roles:
            print(f"- {role}")

    except Exception as e:
        client.logger.error(f"Error in rep_list_subject_roles: {e}")
        print(f"Error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    main()
