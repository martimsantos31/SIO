#!/usr/bin/env python3
import os
import sys
import base64
import json
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend


def generate_subject_credentials(password, credentials_file):
    """
    Generate credentials for a subject, including public key, private key, and salt.

    Args:
        password (str): Password used to derive the private key.
        credentials_file (str): Path to the file where credentials will be saved.

    Returns:
        dict: Dictionary with generated credentials.
    """
    # hash the password
    salt = os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend(),
    )
    password = password.encode()
    key = kdf.derive(password)
    key = int.from_bytes(key, "big")

    private_key = ec.derive_private_key(key, ec.SECP256R1())

    # Serialize the private key without encryption
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption(),  # No encryption for private key
    )

    # Serialize the public key
    public_key = private_key.public_key()
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo,
    )

    # Create credentials structure
    credentials = {
        "public_key": base64.b64encode(public_pem).decode(),
        "salt": base64.b64encode(salt).decode(),
    }

    # Save credentials to the file
    with open(credentials_file, "w") as f:
        json.dump(credentials, f, indent=4)

    return credentials


def rep_subject_credentials(password, credentials_file):
    """
    Main function for generating credentials.

    Args:
        password (str): User's password.
        credentials_file (str): Path to save the credentials.
    """
    credentials = generate_subject_credentials(password, credentials_file)
    print(f"Credentials successfully generated and saved in: {credentials_file}")
    return credentials


def main():
    """
    Main function for execution via CLI.
    """
    try:
        # Ensure sufficient arguments
        if len(sys.argv) != 3:
            print("Error: Insufficient parameters.")
            print(
                "Usage: python rep_subject_credentials.py <password> <credentials_file>"
            )
            return 1

        password = sys.argv[1]
        credentials_file = sys.argv[2]

        # Generate credentials with the provided arguments
        rep_subject_credentials(password, credentials_file)
    except Exception as e:
        print(f"Error executing rep_subject_credentials: {e}")
        return 1
    return 0


if __name__ == "__main__":
    main()
